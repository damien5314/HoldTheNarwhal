apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

repositories {
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
}

Properties localProperties = new Properties()
localProperties.load(project.rootProject.file("local.properties").newDataInputStream())

android {
    compileSdkVersion COMPILE_SDK_VERSION

    defaultConfig {
        applicationId "com.ddiehl.android.htn"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode 2100030
        versionName "0.24"
        resConfigs "en"
        buildConfigField "long", "BUILD_TIME_UTC", "" + getTime()
        def appId = localProperties.getProperty("app_id")
        buildConfigField "String", "REDDIT_APP_ID", "\"" + appId + "\""
        def redirectUri = localProperties.getProperty("app_redirect_uri")
        buildConfigField "String", "REDDIT_REDIRECT_URI", "\"" + redirectUri + "\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file('keys/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release
    }

    Properties releaseKeystoreProperties = getProperties("app/keys/release/keystore.properties")
    if (releaseKeystoreProperties != null) {
        signingConfigs.release.storeFile = file(releaseKeystoreProperties['storeFile'])
        signingConfigs.release.storePassword = releaseKeystoreProperties['storePassword']
        signingConfigs.release.keyAlias = releaseKeystoreProperties['keyAlias']
        signingConfigs.release.keyPassword = releaseKeystoreProperties['keyPassword']
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
            versionNameSuffix "-dev"
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // Renames APK to our standard format `buildType-versionName_versionCode-RCx.apk
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${variant.buildType.name}-${variant.versionName}_${variant.versionCode}-RC0.apk"
        }
    }
}

dependencies {
    implementation fileTree(include: "*.jar", dir: "libs")
    implementation project(":logging")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"
    implementation "androidx.appcompat:appcompat:$ANDROIDX_APPCOMPAT"
    implementation "androidx.recyclerview:recyclerview:$ANDROIDX_RECYCLERVIEW"
    implementation "androidx.cardview:cardview:$ANDROIDX_CARDVIEW"
    implementation "androidx.constraintlayout:constraintlayout:$ANDROIDX_CONSTRAINTLAYOUT"
    implementation "com.google.android.material:material:$ANDROIDX_MATERIAL"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$SWIPE_REFRESH_LAYOUT_VERSION"
    implementation "com.google.firebase:firebase-crashlytics:$FIREBASE_CRASHLYTICS_VERSION"
    implementation "com.google.firebase:firebase-analytics:$FIREBASE_ANALYTICS_VERSION"
    implementation "com.github.bumptech.glide:glide:$GLIDE_VERSION"
    kapt "com.github.bumptech.glide:compiler:$GLIDE_VERSION"
    implementation "com.github.bumptech.glide:okhttp3-integration:$GLIDE_OKHTTP_VERSION"
    implementation "com.github.damien5314.RxReddit:library:$RXREDDIT_VERSION"
    implementation "com.github.damien5314.RxReddit:android:$RXREDDIT_VERSION"
    implementation "io.reactivex.rxjava3:rxjava:$RXJAVA_VERSION"
    implementation "io.reactivex.rxjava3:rxandroid:$RXANDROID_VERSION"
    implementation "com.github.damien5314:TimeSinceTextView:$TIMESINCETEXTVIEW_VERSION"
    implementation "com.google.dagger:dagger:$DAGGER_VERSION"
    implementation "com.google.dagger:dagger-android:$DAGGER_VERSION"
    implementation "com.google.dagger:dagger-android-support:$DAGGER_VERSION"
    kapt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    kapt "com.google.dagger:dagger-android-processor:$DAGGER_VERSION"
    implementation "com.hannesdorfmann.fragmentargs:annotation:$FRAGMENTARGS_VERSION"
    kapt "com.hannesdorfmann.fragmentargs:processor:$FRAGMENTARGS_VERSION"
    implementation "com.google.code.gson:gson:$GSON_VERSION"
    implementation "com.jakewharton.timber:timber:$TIMBER_VERSION"
    implementation "com.google.android.exoplayer:exoplayer-core:$EXOPLAYER_VERSION"
    implementation "com.google.android.exoplayer:exoplayer-dash:$EXOPLAYER_VERSION"
    implementation "com.google.android.exoplayer:exoplayer-ui:$EXOPLAYER_VERSION"
    implementation "com.github.MikeOrtiz:TouchImageView:$TOUCH_IMAGEVIEW_VERSION"

    androidTestImplementation "junit:junit:$JUNIT_VERSION"
    androidTestImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
    androidTestImplementation "androidx.annotation:annotation:$ANDROIDX_ANNOTATION"
    androidTestImplementation "androidx.test:runner:$ANDROIDX_TEST_RUNNER_VERSION"
    androidTestImplementation "androidx.test:rules:$ANDROIDX_TEST_RULES_VERSION"
}

Properties getProperties(def filePath) {
    def propertiesFile = rootProject.file(filePath)
    if (!propertiesFile.exists()) return null

    def properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    return properties
}

static def getTime() {
    return (Calendar.getInstance().timeInMillis / 1000).longValue()
}
